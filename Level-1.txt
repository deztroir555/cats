
Level 1 - Теоретические вопросы:

Q1: Расскажите, чем, на ваш взгляд, отличается хорошая верстка от плохой с точки зрения: пользователя, менеджера проекта, дизайнера, верстальщика, клиентского программиста, серверного программиста.

Пользователь:
Плохая верстка – когда у человека нет опыта, он использует большое количество Html-тегов, и применяет их всюду, даже если в этом нет необходимости.
Хорошая верстка - это когда программисты Html-теги применяют, но исключительно для логического разделения текстовой информации, а для визуализации используют файлы таблиц и актуальные скрипты.

Менеджер проекта:
Хорошая верстка - та, которая отвечает всем требованиям хорошей верстки других участников этого вопроса (то есть пользователя, дизайнера и программистов) + сданная в срок.

Дизайнер:
Хорошая верстка это та, что максимально близко соответствует его макету и отрабатывает задуманное поведение. В идеале верстка должна выглядеть и работать круче дизайна, за счет хотя бы интерактива.

Верстальщик:
Хорошая верстка это та, которую легко изменять и расширять. В принципе рекомендации любой методологии направлены на это.

Клиент и сервер программисты:
Хорошая это верстка, которую не приходится доделывать/переделывать под программные нужды. Ну и конечно хорошая верстка должна легко читаться и быть очевидной изнутри. Осмысленное название классов, комментарии и единство стиля сильно этому способствует.

Q2: Опишите основные особенности верстки крупных многостраничных сайтов, дизайн которых может меняться в процессе реализации и поддержки.
Расскажите о своем опыте верстки подобных сайтов: какие методологии, инструменты и технологии вы применяли на практике. 

При верстке крупных изменяющихся сайтов важно, чтобы код стилей и разметки оставался легко читаемым вне зависимости от его совокупного количества. Этому сильно способствует модульная архитектура. Компоненты должны быть максимально независимы, чтобы удаление/изменение одного компонента, не влияло на другие.
Еще одна особенность - большое влияние абстрактного выделения блоков. Хорошо, если похожие по смыслу и отображению блоки описаны общими стилями, но здесь нужно быть очень осторожным, часто неправильная абстракция гораздо хуже повторно написаных стилей.
Насчет опыта, его не сильно у меня много, так как сайты я делал для себя, чтобы понимать, что такое фронтенд. Использовал официальную документацию HTML/CSS. Для JSa использовал в основном YouTube и наш любимый StackOverFlow.
IDE использовал в основном VS Code, по мне он проще и универсален. Также у меня имеется и WebStorm, но исключительно в целях сравнения, я и в нем работал. VS Code мне все равно по душе, он очень простой.
Я использую продукты JetBrains только в том случае, если я не могу решить определенную задачу в VS Code, например на PHP мне приходилось использовать Open Server и IDE PhpStorm, также подключение с БД MySQL или Postgre. Но в основном я использую Mongo, если речь идет о JS.

Q3: Опишите основные особенности верстки сайтов, которые должны одинаково хорошо отображаться как на любом современном компьютере, так и на смартфонах и планшетах под управлением iOS и Android. 
Расскажите о своем опыте верстки подобных сайтов: какие инструменты и технологии вы применяли, как проверяли результат на различных устройствах, какие именно устройства требовалось поддерживать. 

Пожалуй ключевой момент, особенно для старых телефонов, это производительность и трафик. Хотя и для новых это очень важно. Нужно помнить об ограничениях, связанных со скроллингом (почти все мобильные тормозят выполнение JS при скролле), куча проблем возникает с position:fixed и порой от него лучше отказаться. Фиксированный бэкграунд тоже вероятно будет проблемой, он и в iOS толком не работает. Для экранов retina стоит подргужать svg-графику / иконочные шрифты / изображение двойного размера. Много нюансов надо учитывать.
На гитхабе имеется проект с адаптивной версткой: https://github.com/deztroir555/Project1. Я сам не помню, но лишь взглянув на код я могу понять, что для каждого смартфона я уменьшал max-width, соответственно приходилось и менять длину всех div-классов.

Q4: Расскажите, какие инструменты помогают вам экономить время в процессе написания, проверки и отладки кода. 
Как я уже написал выше, я использую IDE Visual Studio Code, дебаги и тесты я провожу в самом браузере, если речь идет о фронтенде.

Q5: Вам нужно понять, почему страница отображается некорректно в Safari на iOS и в IE на Windows. 
Код писали не вы, доступа к исходникам у вас нет. Ваши действия?
Сталкивались ли вы с подобными проблемами на практике? 

Хоть к исходному коду доступа и нет, но все-таки анализ его работы доступен из браузера.
Но для начала необходимо получить описание бага, если вручную посмотреть не удается. В идеале конечно посмотреть на поведение там, где баг обнаружен, то есть непосредственно в этих браузерах.
Еще вариант - использовать сторонние сервисы для проверки кросс-бразуерности, некоторые из них выдают скриншоты. Либо, для сурового анализа, поднимать виртуальную машину и искать iOS.
Если проблема связана отображения связана с каким-нибудь специфическим свойством, то обязательно стоит проверить его в caniuse, там можно найти множество информации и для проблем. После анализа описания проблем и кода из клиента, если четкого понимания бага нет, необходимо составить гипотезы о его возникновении.
Клиентский код вполне можно вытащить из браузера, во всяком случае для проверки багов верстки этого должно хватить.
На практике с таким не сталкивался.

Q6: Дизайнер отдал вам макет, в котором не показано, как должны выглядеть интерактивные элементы при наведении мыши. Ваши действия?
Предположим характер интерактивных элементов очевиден (например это flat-кнопки), тогда стоит для ховера попробовать что-нибудь привычное, например небольшое изменение цвета.
Часто бывают элементы, с визуально очевидным поведением, но сложным видом, в таком случае можно обойтись и простой сменой указателя мыши на pointer или другой подходящий.
Даже если чего то не хватает, я бы сделал как сам считаю нужным и как больше всего подходит под соответствующий стиль, результат бы отправил дизайнеру. Не всегда же с первого раза все делать :)





